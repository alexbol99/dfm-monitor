{"ast":null,"code":"export function getChartData(data) {\n  let stats = data.batch.map(action => {\n    let timestamp = data.acpTime.find(a => a.Stage === action.Stage && a.Index === action.StageIndex);\n    return {\n      Object: timestamp.Succeed ? \"Acp\" : \"Acp Failed\",\n      ActNum: action.ActNum,\n      Name: action.AnalysisName,\n      Layer: action.LayerName,\n      Stage: action.Stage,\n      Index: action.Stage + '_' + action.StageIndex,\n      StartTime: timestamp ? timestamp.StartTime : \"\",\n      CompleteTime: timestamp ? timestamp.CompleteTime : \"\",\n      Time: time_diff(timestamp.StartTime, timestamp.CompleteTime),\n      StartDate: new Date(`01/01/1970 ${timestamp.StartTime}`),\n      EndDate: new Date(`01/01/1970 ${timestamp.CompleteTime}`)\n    };\n  });\n  let uploadObj = {\n    Object: \"Upload\",\n    Name: \"Upload\",\n    Index: -1,\n    StartDate: new Date(`01/01/1970 ${data.uploadTime.StartTime}`),\n    EndDate: new Date(`01/01/1970 ${data.uploadTime.CompleteTime}`)\n  };\n  let splitterObj = {\n    Object: \"Splitter\",\n    Name: \"Splitter\",\n    Index: 0,\n    StartDate: new Date(`01/01/1970 ${data.splitterTime.StartTime}`),\n    EndDate: new Date(`01/01/1970 ${data.splitterTime.CompleteTime}`)\n  };\n  let mergerObj;\n\n  if (data.mergerTime.StartTime && data.mergerTime.CompleteTime) {\n    mergerObj = {\n      Object: \"Merger\",\n      Name: \"Merger\",\n      Index: stats.length + 1,\n      StartDate: new Date(`01/01/1970 ${data.mergerTime.StartTime}`),\n      EndDate: new Date(`01/01/1970 ${data.mergerTime.CompleteTime}`)\n    };\n  }\n\n  let downloadObj;\n\n  if (data.downloadTime.StartTime && data.downloadTime.CompleteTime) {\n    downloadObj = {\n      Object: \"Download\",\n      Name: \"Download\",\n      Index: stats.length + 2,\n      StartDate: new Date(`01/01/1970 ${data.downloadTime.StartTime}`),\n      EndDate: new Date(`01/01/1970 ${data.downloadTime.CompleteTime}`)\n    };\n  }\n\n  stats = [uploadObj, splitterObj, ...stats];\n  if (mergerObj) stats = [...stats, mergerObj];\n  if (downloadObj) stats = [...stats, downloadObj];\n  return stats;\n}\nexport function getListData(localData) {\n  const actionsNum = localData === null || localData === void 0 ? void 0 : localData.batch[localData.batch.length - 1].ActNum;\n  const layersNum = new Set(localData === null || localData === void 0 ? void 0 : localData.batch.map(action => action.LayerName)).size;\n  return {\n    runningDate: localData === null || localData === void 0 ? void 0 : localData.runningDate,\n    jobName: localData === null || localData === void 0 ? void 0 : localData.jobName,\n    step: localData === null || localData === void 0 ? void 0 : localData.batch[0].StepName,\n    checklist: localData === null || localData === void 0 ? void 0 : localData.batch[0].ChecklistName,\n    actionsNum: actionsNum,\n    layersNum: layersNum,\n    runningTime: localData === null || localData === void 0 ? void 0 : localData.runningTime,\n    batchJobsNum: localData === null || localData === void 0 ? void 0 : localData.batch.length,\n    key: localData === null || localData === void 0 ? void 0 : localData.key,\n    errorTime: localData === null || localData === void 0 ? void 0 : localData.errorTime\n  };\n}\n\nfunction time_diff(start_time, complete_time) {\n  let start = start_time.split(':').map(t => Number(t));\n  let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\n  let complete = complete_time.split(':').map(t => Number(t));\n  let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\n  let diff_sec = complete_sec - start_sec;\n  return diff_sec;\n}","map":null,"metadata":{},"sourceType":"module"}