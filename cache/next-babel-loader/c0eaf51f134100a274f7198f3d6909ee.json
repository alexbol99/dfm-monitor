{"ast":null,"code":"import _toConsumableArray from \"@babel/runtime/helpers/esm/toConsumableArray\";\nimport _slicedToArray from \"@babel/runtime/helpers/esm/slicedToArray\";\nexport function parse(text) {\n  var row_lines = text.split('\\n');\n  var arrayOfTimestamps = timestamps(row_lines);\n  var errorTimeString = errorTime(arrayOfTimestamps);\n  return {\n    runningDate: runningDate(row_lines),\n    runningTime: runningTime(row_lines, errorTimeString),\n    jobName: jobName(row_lines),\n    batch: batch(arrayOfTimestamps),\n    uploadTime: uploadTime(arrayOfTimestamps),\n    splitterTime: splitterTime(arrayOfTimestamps),\n    acpTime: acpTime(arrayOfTimestamps),\n    mergerTime: mergerTime(arrayOfTimestamps),\n    downloadTime: downloadTime(arrayOfTimestamps),\n    errorTime: errorTimeString\n  };\n}\n\nfunction jobName(row_lines) {\n  var job_line = row_lines.filter(function (line) {\n    return line.match(\"Job:\");\n  })[0];\n  var job_name = job_line.split(' ')[1];\n  return job_name;\n}\n\nfunction runningDate(row_lines) {\n  var arrayOfLines = row_lines.filter(function (line) {\n    return line.match(\"time\");\n  });\n  var splitArray = arrayOfLines[0].split(' ');\n\n  var _splitArray$1$split$ = splitArray[1].split(':')[1].split('/'),\n      _splitArray$1$split$2 = _slicedToArray(_splitArray$1$split$, 3),\n      day = _splitArray$1$split$2[0],\n      month = _splitArray$1$split$2[1],\n      year = _splitArray$1$split$2[2];\n\n  if (day.length > 2) day = day.substr(1);\n\n  var _splitArray$2$split = splitArray[2].split(':'),\n      _splitArray$2$split2 = _slicedToArray(_splitArray$2$split, 2),\n      hour = _splitArray$2$split2[0],\n      min = _splitArray$2$split2[1];\n\n  if (hour.length > 2) hour = hour.substr(1);\n  if (min.length > 2) min = min.substr(1);\n  return new Date(Date.UTC(year, month - 1, day, hour, min)).toUTCString();\n}\n\nfunction runningTime(row_lines, errorTime) {\n  var job_started_line = row_lines.filter(function (line) {\n    return line.match(\"Ready for commands\");\n  })[0];\n  var start_time = JSON.parse(job_started_line).time;\n  var job_ended_line = row_lines.filter(function (line) {\n    return line.match(\"Job is ready\");\n  });\n  var end_time = job_ended_line.length > 0 ? JSON.parse(job_ended_line).time : errorTime;\n  return secToHHMMSS(time_diff(start_time, end_time));\n} // export function getChartData(data) {\n//     let stats = data.batch.map(action => {\n//         let timestamp = data.acpTime.find(\n//             a => a.Stage === action.Stage && a.Index === action.StageIndex\n//         );\n//         return {\n//             Object: \"Acp\",\n//             ActNum: action.ActNum,\n//             Name: action.AnalysisName,\n//             Layer: action.LayerName,\n//             Stage: action.Stage,\n//             Index: action.StageIndex,\n//             StartTime: timestamp ? timestamp.StartTime : \"\",\n//             CompleteTime: timestamp ? timestamp.CompleteTime : \"\",\n//             Time: time_diff(timestamp.StartTime, timestamp.CompleteTime),\n//             StartDate: new Date(`01/01/1970 ${timestamp.StartTime}`),\n//             EndDate: new Date(`01/01/1970 ${timestamp.CompleteTime}`)\n//         };\n//     });\n//     let splitterObj = {\n//         Object: \"Splitter\",\n//         Name: \"Splitter\",\n//         Index: 0,\n//         StartDate: new Date(`01/01/1970 ${data.splitterTime.StartTime}`),\n//         EndDate: new Date(`01/01/1970 ${data.splitterTime.CompleteTime}`)\n//     };\n//     let mergerObj = {\n//         Object: \"Merger\",\n//         Name: \"Merger\",\n//         Index: stats.length + 1,\n//         StartDate: new Date(`01/01/1970 ${data.mergerTime.StartTime}`),\n//         EndDate: new Date(`01/01/1970 ${data.mergerTime.CompleteTime}`)\n//     };\n//     let uploadObj = {\n//         Object: \"Upload\",\n//         Name: \"Upload\",\n//         Index: -1,\n//         StartDate: new Date(`01/01/1970 ${data.uploadTime.StartTime}`),\n//         EndDate: new Date(`01/01/1970 ${data.uploadTime.CompleteTime}`)\n//     };\n//     let downloadObj = {\n//         Object: \"Download\",\n//         Name: \"Download\",\n//         Index: stats.length + 2,\n//         StartDate: new Date(`01/01/1970 ${data.downloadTime.StartTime}`),\n//         EndDate: new Date(`01/01/1970 ${data.downloadTime.CompleteTime}`)\n//     };\n//     // stats = [uploadObj, splitterObj, ...stats, mergerObj, downloadTime];\n//     stats = [uploadObj, splitterObj, ...stats, mergerObj, downloadObj];\n//     return stats;\n// }\n\n\nfunction batch(arrayOfTimestamps) {\n  var batchObject = arrayOfTimestamps.filter(function (d) {\n    return d.type === \"Batch\";\n  })[0];\n  return JSON.parse(batchObject.message);\n}\n\nfunction uploadTime(arrayOfTimestamps) {\n  var uploadTime = {\n    StartTime: arrayOfTimestamps.find(function (d) {\n      return d.object === \"WebClient\" && d.message === \"Job was registered\";\n    }).time,\n    CompleteTime: arrayOfTimestamps.find(function (d) {\n      return d.object === \"WebClient\" && d.message === \"After send\";\n    }).time\n  };\n  return uploadTime;\n}\n\nfunction splitterTime(arrayOfTimestamps) {\n  var splitter = arrayOfTimestamps.filter(function (d) {\n    return d.object === \"Splitter\";\n  });\n  var s = {\n    StartTime: toLocal(splitter.find(function (s) {\n      return s.message === \"Splitter started\";\n    }).time),\n    CompleteTime: toLocal(splitter.find(function (s) {\n      return s.message === \"End of Split\";\n    }).time)\n  };\n  return s;\n}\n\nfunction mergerTime(arrayOfTimestamps) {\n  var merger = arrayOfTimestamps.filter(function (d) {\n    return d.object === \"Merger\";\n  }); // if (!merger) return null\n\n  var mergerStartMessage = merger.find(function (s) {\n    return s.message === \"Preparing job for merge\";\n  });\n  var mergerCompleteMessage = merger.find(function (s) {\n    return s.message === \"Moving Job to S3\";\n  });\n  var s = {\n    StartTime: mergerStartMessage ? toLocal(mergerStartMessage.time) : null,\n    CompleteTime: mergerCompleteMessage ? toLocal(mergerCompleteMessage.time) : null\n  };\n  return s;\n}\n\nfunction downloadTime(arrayOfTimestamps) {\n  var downloadStartMessage = arrayOfTimestamps.find(function (d) {\n    return d.object === \"WebClient\" && d.message === \"Download Data\";\n  });\n  var downloadCompleteMessage = arrayOfTimestamps.find(function (d) {\n    return d.object === \"WebClient\" && d.message === \"Job is ready\";\n  });\n  var downloadTime = {\n    StartTime: downloadStartMessage ? downloadStartMessage.time : null,\n    CompleteTime: downloadCompleteMessage ? downloadCompleteMessage.time : null\n  };\n  return downloadTime;\n}\n\nfunction acpTime(arrayOfTimestamps) {\n  var errorTimeStr = errorTime(arrayOfTimestamps);\n  var acp = arrayOfTimestamps.filter(function (d) {\n    return d.type === \"Progress\";\n  });\n  var acp_transformed = acp.map(function (action) {\n    var message = action.message.split(' ');\n    var localTime = toLocal(action.time);\n    return {\n      Time: localTime,\n      Step: message[0],\n      Stage: message[1].split(':')[1],\n      Index: Number(message[2].split(':')[1])\n    };\n  });\n  var acp_started = acp_transformed.filter(function (action) {\n    return action.Step === \"Starting\";\n  }).map(function (action) {\n    return {\n      Stage: action.Stage,\n      Index: action.Index,\n      StartTime: action.Time\n    };\n  });\n  var acp_completed = acp_transformed.filter(function (action) {\n    return action.Step === \"Completed\";\n  }).map(function (action) {\n    return {\n      Stage: action.Stage,\n      Index: action.Index,\n      CompleteTime: action.Time\n    };\n  });\n  var acp_timestamp = acp_started.map(function (action) {\n    var completeTimeMessage = acp_completed.find(function (c) {\n      return c.Stage === action.Stage && c.Index === action.Index;\n    });\n    return {\n      Stage: action.Stage,\n      Index: action.Index,\n      StartTime: action.StartTime,\n      CompleteTime: completeTimeMessage ? completeTimeMessage.CompleteTime : errorTimeStr,\n      Succeed: !!completeTimeMessage\n    };\n  });\n  return acp_timestamp;\n}\n\nfunction errorTime(arrayOfTimestamps) {\n  var errorMessage = arrayOfTimestamps.find(function (d) {\n    return d.object === \"WebClient\" && d.type === \"ERROR\";\n  });\n  var errorTime = errorMessage ? errorMessage.time : null;\n  return errorTime;\n}\n\nfunction timestamps(row_lines) {\n  var arrayOfLines = row_lines.filter(function (line) {\n    return line.match(\"time\");\n  });\n\n  var tmpArrayOfLines = _toConsumableArray(arrayOfLines);\n\n  tmpArrayOfLines.splice(0, 1);\n  return tmpArrayOfLines.map(function (line) {\n    return JSON.parse(line);\n  });\n}\n\nfunction time_diff(start_time, complete_time) {\n  var start = start_time.split(':').map(function (t) {\n    return Number(t);\n  });\n  var start_sec = start[0] * 3600 + start[1] * 60 + start[2];\n  var complete = complete_time.split(':').map(function (t) {\n    return Number(t);\n  });\n  var complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\n  var diff_sec = complete_sec - start_sec;\n  return diff_sec;\n}\n\nfunction secToHHMMSS(time) {\n  return new Date(time * 1000).toISOString().substr(11, 8);\n}\n\nfunction toLocal(hhmmss) {\n  if (!hhmmss) return null;\n\n  var _hhmmss$split = hhmmss.split(':'),\n      _hhmmss$split2 = _slicedToArray(_hhmmss$split, 3),\n      HH = _hhmmss$split2[0],\n      MM = _hhmmss$split2[1],\n      SS = _hhmmss$split2[2];\n\n  var local = [Number(HH) + 3, MM, SS].join(':');\n  return local;\n}","map":{"version":3,"sources":["/Users/alexanderbol/WebstormProjects/dfm-monitor/models/logParser.js"],"names":["parse","text","row_lines","split","arrayOfTimestamps","timestamps","errorTimeString","errorTime","runningDate","runningTime","jobName","batch","uploadTime","splitterTime","acpTime","mergerTime","downloadTime","job_line","filter","line","match","job_name","arrayOfLines","splitArray","day","month","year","length","substr","hour","min","Date","UTC","toUTCString","job_started_line","start_time","JSON","time","job_ended_line","end_time","secToHHMMSS","time_diff","batchObject","d","type","message","StartTime","find","object","CompleteTime","splitter","s","toLocal","merger","mergerStartMessage","mergerCompleteMessage","downloadStartMessage","downloadCompleteMessage","errorTimeStr","acp","acp_transformed","map","action","localTime","Time","Step","Stage","Index","Number","acp_started","acp_completed","acp_timestamp","completeTimeMessage","c","Succeed","errorMessage","tmpArrayOfLines","splice","complete_time","start","t","start_sec","complete","complete_sec","diff_sec","toISOString","hhmmss","HH","MM","SS","local","join"],"mappings":"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","sourcesContent":["export function parse(text) {\n    const row_lines = text.split('\\n');\n    const arrayOfTimestamps = timestamps(row_lines);\n    const errorTimeString = errorTime(arrayOfTimestamps);\n    return {\n        runningDate: runningDate(row_lines),\n        runningTime: runningTime(row_lines, errorTimeString),\n        jobName: jobName(row_lines),\n        batch: batch(arrayOfTimestamps),\n        uploadTime: uploadTime(arrayOfTimestamps),\n        splitterTime: splitterTime(arrayOfTimestamps),\n        acpTime: acpTime(arrayOfTimestamps),\n        mergerTime: mergerTime(arrayOfTimestamps),\n        downloadTime: downloadTime(arrayOfTimestamps),\n        errorTime: errorTimeString\n    };\n}\n\nfunction jobName(row_lines) {\n    const job_line = row_lines.filter(line => line.match(\"Job:\"))[0];\n    const job_name = job_line.split(' ')[1];\n    return job_name;\n}\n\nfunction runningDate(row_lines) {\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\n    let splitArray = arrayOfLines[0].split(' ');\n    let [day, month, year] = splitArray[1].split(':')[1].split('/');\n    if (day.length > 2) day = day.substr(1);\n    let [hour, min] = splitArray[2].split(':');\n    if (hour.length > 2) hour = hour.substr(1);\n    if (min.length > 2) min = min.substr(1);\n    return new Date(Date.UTC(year, month - 1, day, hour, min)).toUTCString();\n}\n\nfunction runningTime(row_lines, errorTime) {\n    let job_started_line = row_lines\n        .filter(line => line.match(\"Ready for commands\"))[0];\n    let start_time = JSON.parse(job_started_line).time;\n    let job_ended_line = row_lines\n        .filter(line => line.match(\"Job is ready\"));\n    let end_time = job_ended_line.length > 0 ? JSON.parse(job_ended_line).time : errorTime;\n\n    return secToHHMMSS(\n        time_diff(start_time, end_time));\n}\n\n// export function getChartData(data) {\n//     let stats = data.batch.map(action => {\n//         let timestamp = data.acpTime.find(\n//             a => a.Stage === action.Stage && a.Index === action.StageIndex\n//         );\n//         return {\n//             Object: \"Acp\",\n//             ActNum: action.ActNum,\n//             Name: action.AnalysisName,\n//             Layer: action.LayerName,\n//             Stage: action.Stage,\n//             Index: action.StageIndex,\n//             StartTime: timestamp ? timestamp.StartTime : \"\",\n//             CompleteTime: timestamp ? timestamp.CompleteTime : \"\",\n//             Time: time_diff(timestamp.StartTime, timestamp.CompleteTime),\n//             StartDate: new Date(`01/01/1970 ${timestamp.StartTime}`),\n//             EndDate: new Date(`01/01/1970 ${timestamp.CompleteTime}`)\n//         };\n//     });\n\n//     let splitterObj = {\n//         Object: \"Splitter\",\n//         Name: \"Splitter\",\n//         Index: 0,\n//         StartDate: new Date(`01/01/1970 ${data.splitterTime.StartTime}`),\n//         EndDate: new Date(`01/01/1970 ${data.splitterTime.CompleteTime}`)\n//     };\n\n//     let mergerObj = {\n//         Object: \"Merger\",\n//         Name: \"Merger\",\n//         Index: stats.length + 1,\n//         StartDate: new Date(`01/01/1970 ${data.mergerTime.StartTime}`),\n//         EndDate: new Date(`01/01/1970 ${data.mergerTime.CompleteTime}`)\n//     };\n\n//     let uploadObj = {\n//         Object: \"Upload\",\n//         Name: \"Upload\",\n//         Index: -1,\n//         StartDate: new Date(`01/01/1970 ${data.uploadTime.StartTime}`),\n//         EndDate: new Date(`01/01/1970 ${data.uploadTime.CompleteTime}`)\n//     };\n\n//     let downloadObj = {\n//         Object: \"Download\",\n//         Name: \"Download\",\n//         Index: stats.length + 2,\n//         StartDate: new Date(`01/01/1970 ${data.downloadTime.StartTime}`),\n//         EndDate: new Date(`01/01/1970 ${data.downloadTime.CompleteTime}`)\n//     };\n\n//     // stats = [uploadObj, splitterObj, ...stats, mergerObj, downloadTime];\n//     stats = [uploadObj, splitterObj, ...stats, mergerObj, downloadObj];\n//     return stats;\n// }\n\nfunction batch(arrayOfTimestamps) {\n    let batchObject = arrayOfTimestamps.filter(d => d.type === \"Batch\")[0];\n    return JSON.parse(batchObject.message);\n}\n\nfunction uploadTime(arrayOfTimestamps) {\n    let uploadTime = {\n        StartTime: arrayOfTimestamps.find(\n            d => d.object === \"WebClient\" && d.message === \"Job was registered\"\n        ).time,\n        CompleteTime: arrayOfTimestamps.find(\n            d => d.object === \"WebClient\" && d.message === \"After send\"\n        ).time\n    };\n    return uploadTime;\n}\n\nfunction splitterTime(arrayOfTimestamps) {\n    let splitter = arrayOfTimestamps.filter(d => d.object === \"Splitter\")\n    let s = {\n        StartTime: toLocal(\n            splitter.find(s => s.message === \"Splitter started\").time\n        ),\n        CompleteTime: toLocal(splitter.find(s => s.message === \"End of Split\").time)\n    };\n    return s;\n}\n\nfunction mergerTime(arrayOfTimestamps) {\n    let merger = arrayOfTimestamps.filter(d => d.object === \"Merger\");\n    // if (!merger) return null\n\n    let mergerStartMessage = merger.find(s => s.message === \"Preparing job for merge\");\n    let mergerCompleteMessage = merger.find(s => s.message === \"Moving Job to S3\");\n\n    let s = {\n        StartTime: mergerStartMessage ? toLocal(mergerStartMessage.time) : null,\n        CompleteTime: mergerCompleteMessage ? toLocal(mergerCompleteMessage.time) : null\n    };\n    return s;\n}\n\nfunction downloadTime(arrayOfTimestamps) {\n    let downloadStartMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Download Data\");\n    let downloadCompleteMessage = arrayOfTimestamps.find(d => d.object === \"WebClient\" && d.message === \"Job is ready\");\n    let downloadTime = {\n        StartTime: downloadStartMessage ? downloadStartMessage.time : null,\n        CompleteTime: downloadCompleteMessage ? downloadCompleteMessage.time : null\n    };\n    return downloadTime;\n}\n\nfunction acpTime(arrayOfTimestamps) {\n    let errorTimeStr = errorTime(arrayOfTimestamps);\n    let acp = arrayOfTimestamps.filter(d => d.type === \"Progress\");\n    let acp_transformed = acp.map(action => {\n        let message = action.message.split(' ');\n        let localTime = toLocal(action.time);\n        return {\n            Time: localTime,\n            Step: message[0],\n            Stage: message[1].split(':')[1],\n            Index: Number(message[2].split(':')[1])\n        };\n    });\n    let acp_started = acp_transformed\n        .filter(action => action.Step === \"Starting\")\n        .map(action => {\n            return {\n                Stage: action.Stage,\n                Index: action.Index,\n                StartTime: action.Time\n            };\n        });\n    let acp_completed = acp_transformed\n        .filter(action => action.Step === \"Completed\")\n        .map(action => {\n            return {\n                Stage: action.Stage,\n                Index: action.Index,\n                CompleteTime: action.Time\n            };\n        });\n    let acp_timestamp = acp_started.map(action => {\n        let completeTimeMessage = acp_completed.find(\n            c => c.Stage === action.Stage && c.Index === action.Index\n        );\n\n        return {\n            Stage: action.Stage,\n            Index: action.Index,\n            StartTime: action.StartTime,\n            CompleteTime: completeTimeMessage ? completeTimeMessage.CompleteTime : errorTimeStr,\n            Succeed: !!completeTimeMessage\n        };\n    });\n    return acp_timestamp;\n}\n\nfunction errorTime(arrayOfTimestamps) {\n    let errorMessage = arrayOfTimestamps.find(\n        d => d.object === \"WebClient\" && d.type === \"ERROR\"\n    );\n    let errorTime = errorMessage ? errorMessage.time : null;\n    return errorTime;\n}\n\nfunction timestamps(row_lines) {\n    let arrayOfLines = row_lines.filter(line => line.match(\"time\"));\n    let tmpArrayOfLines = [...arrayOfLines];\n    tmpArrayOfLines.splice(0, 1);\n    return tmpArrayOfLines.map(line => JSON.parse(line));\n}\n\nfunction time_diff(start_time, complete_time) {\n    let start = start_time.split(':').map(t => Number(t));\n    let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\n    let complete = complete_time.split(':').map(t => Number(t));\n    let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\n    let diff_sec = complete_sec - start_sec;\n    return diff_sec;\n}\n\nfunction secToHHMMSS(time) {\n    return new Date(time * 1000).toISOString().substr(11, 8);\n}\n\nfunction toLocal(hhmmss) {\n    if (!hhmmss) return null;\n    let [HH, MM, SS] = hhmmss.split(':');\n    let local = [Number(HH) + 3, MM, SS].join(':');\n    return local;\n}\n"]},"metadata":{},"sourceType":"module"}