{"ast":null,"code":"export function getChartData(data) {\n  let stats = data.batch.map(action => {\n    let timestamp = data.acpTime.find(a => a.Stage === action.Stage && a.Index === action.StageIndex);\n    return {\n      Object: timestamp.Succeed ? \"Acp\" : \"Acp Failed\",\n      ActNum: action.ActNum,\n      Name: action.AnalysisName,\n      Layer: action.LayerName,\n      Stage: action.Stage,\n      Index: action.Stage + '_' + action.StageIndex,\n      StartTime: timestamp ? timestamp.StartTime : \"\",\n      CompleteTime: timestamp ? timestamp.CompleteTime : \"\",\n      Time: time_diff(timestamp.StartTime, timestamp.CompleteTime),\n      StartDate: new Date(`01/01/1970 ${timestamp.StartTime}`),\n      EndDate: new Date(`01/01/1970 ${timestamp.CompleteTime}`)\n    };\n  });\n  let uploadObj = {\n    Object: \"Upload\",\n    Name: \"Upload\",\n    Index: -1,\n    StartDate: new Date(`01/01/1970 ${data.uploadTime.StartTime}`),\n    EndDate: new Date(`01/01/1970 ${data.uploadTime.CompleteTime}`)\n  };\n  let splitterObj = {\n    Object: \"Splitter\",\n    Name: \"Splitter\",\n    Index: 0,\n    StartDate: new Date(`01/01/1970 ${data.splitterTime.StartTime}`),\n    EndDate: new Date(`01/01/1970 ${data.splitterTime.CompleteTime}`)\n  };\n  let mergerObj;\n\n  if (data.mergerTime.StartTime && data.mergerTime.CompleteTime) {\n    mergerObj = {\n      Object: \"Merger\",\n      Name: \"Merger\",\n      Index: stats.length + 1,\n      StartDate: new Date(`01/01/1970 ${data.mergerTime.StartTime}`),\n      EndDate: new Date(`01/01/1970 ${data.mergerTime.CompleteTime}`)\n    };\n  }\n\n  let downloadObj;\n\n  if (data.downloadTime.StartTime && data.downloadTime.CompleteTime) {\n    downloadObj = {\n      Object: \"Download\",\n      Name: \"Download\",\n      Index: stats.length + 2,\n      StartDate: new Date(`01/01/1970 ${data.downloadTime.StartTime}`),\n      EndDate: new Date(`01/01/1970 ${data.downloadTime.CompleteTime}`)\n    };\n  }\n\n  stats = [uploadObj, splitterObj, ...stats];\n  if (mergerObj) stats = [...stats, mergerObj];\n  if (downloadObj) stats = [...stats, downloadObj];\n  return stats;\n}\nexport function getListData(localData) {\n  const actionsNum = localData === null || localData === void 0 ? void 0 : localData.batch[localData.batch.length - 1].ActNum;\n  const layersNum = new Set(localData === null || localData === void 0 ? void 0 : localData.batch.map(action => action.LayerName)).size;\n  return {\n    runningDate: localData === null || localData === void 0 ? void 0 : localData.runningDate,\n    jobName: localData === null || localData === void 0 ? void 0 : localData.jobName,\n    step: localData === null || localData === void 0 ? void 0 : localData.batch[0].StepName,\n    checklist: localData === null || localData === void 0 ? void 0 : localData.batch[0].ChecklistName,\n    actionsNum: actionsNum,\n    layersNum: layersNum,\n    runningTime: localData === null || localData === void 0 ? void 0 : localData.runningTime,\n    batchJobsNum: localData === null || localData === void 0 ? void 0 : localData.batch.length,\n    key: localData === null || localData === void 0 ? void 0 : localData.key,\n    errorTime: localData === null || localData === void 0 ? void 0 : localData.errorTime\n  };\n}\n\nfunction time_diff(start_time, complete_time) {\n  let start = start_time.split(':').map(t => Number(t));\n  let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\n  let complete = complete_time.split(':').map(t => Number(t));\n  let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\n  let diff_sec = complete_sec - start_sec;\n  return diff_sec;\n}","map":{"version":3,"sources":["/Users/alexanderbol/WebstormProjects/dfm-monitor/models/logData.js"],"names":["getChartData","data","stats","batch","map","action","timestamp","acpTime","find","a","Stage","Index","StageIndex","Object","Succeed","ActNum","Name","AnalysisName","Layer","LayerName","StartTime","CompleteTime","Time","time_diff","StartDate","Date","EndDate","uploadObj","uploadTime","splitterObj","splitterTime","mergerObj","mergerTime","length","downloadObj","downloadTime","getListData","localData","actionsNum","layersNum","Set","size","runningDate","jobName","step","StepName","checklist","ChecklistName","runningTime","batchJobsNum","key","errorTime","start_time","complete_time","start","split","t","Number","start_sec","complete","complete_sec","diff_sec"],"mappings":"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","sourcesContent":["export function getChartData(data) {\n    let stats = data.batch.map(action => {\n        let timestamp = data.acpTime.find(\n            a => a.Stage === action.Stage && a.Index === action.StageIndex\n        );\n        return {\n            Object: timestamp.Succeed ? \"Acp\" : \"Acp Failed\",\n            ActNum: action.ActNum,\n            Name: action.AnalysisName,\n            Layer: action.LayerName,\n            Stage: action.Stage,\n            Index: action.Stage + '_' + action.StageIndex,\n            StartTime: timestamp ? timestamp.StartTime : \"\",\n            CompleteTime: timestamp ? timestamp.CompleteTime : \"\",\n            Time: time_diff(timestamp.StartTime, timestamp.CompleteTime),\n            StartDate: new Date(`01/01/1970 ${timestamp.StartTime}`),\n            EndDate: new Date(`01/01/1970 ${timestamp.CompleteTime}`)\n        };\n    });\n\n    let uploadObj = {\n        Object: \"Upload\",\n        Name: \"Upload\",\n        Index: -1,\n        StartDate: new Date(`01/01/1970 ${data.uploadTime.StartTime}`),\n        EndDate: new Date(`01/01/1970 ${data.uploadTime.CompleteTime}`)\n    };\n\n    let splitterObj = {\n        Object: \"Splitter\",\n        Name: \"Splitter\",\n        Index: 0,\n        StartDate: new Date(`01/01/1970 ${data.splitterTime.StartTime}`),\n        EndDate: new Date(`01/01/1970 ${data.splitterTime.CompleteTime}`)\n    };\n\n    let mergerObj;\n    if (data.mergerTime.StartTime && data.mergerTime.CompleteTime) {\n        mergerObj = {\n            Object: \"Merger\",\n            Name: \"Merger\",\n            Index: stats.length + 1,\n            StartDate: new Date(`01/01/1970 ${data.mergerTime.StartTime}`),\n            EndDate: new Date(`01/01/1970 ${data.mergerTime.CompleteTime}`)\n        };\n    }\n\n    let downloadObj;\n    if (data.downloadTime.StartTime && data.downloadTime.CompleteTime) {\n        downloadObj = {\n            Object: \"Download\",\n            Name: \"Download\",\n            Index: stats.length + 2,\n            StartDate: new Date(`01/01/1970 ${data.downloadTime.StartTime}`),\n            EndDate: new Date(`01/01/1970 ${data.downloadTime.CompleteTime}`)\n        };\n    }\n\n    stats = [uploadObj, splitterObj, ...stats];\n    if (mergerObj) stats = [...stats, mergerObj];\n    if (downloadObj) stats = [...stats, downloadObj];\n\n    return stats;\n}\n\n\nexport function getListData(localData) {\n    const actionsNum = localData?.batch[localData.batch.length - 1].ActNum;\n    const layersNum = new Set(localData?.batch.map(action => action.LayerName)).size;\n    return {\n        runningDate: localData?.runningDate,\n        jobName: localData?.jobName,\n        step: localData?.batch[0].StepName,\n        checklist: localData?.batch[0].ChecklistName,\n        actionsNum: actionsNum,\n        layersNum: layersNum,\n        runningTime: localData?.runningTime,\n        batchJobsNum: localData?.batch.length,\n        key: localData?.key,\n        errorTime: localData?.errorTime\n    }\n}\n\nfunction time_diff(start_time, complete_time) {\n    let start = start_time.split(':').map(t => Number(t));\n    let start_sec = start[0] * 3600 + start[1] * 60 + start[2];\n    let complete = complete_time.split(':').map(t => Number(t));\n    let complete_sec = complete[0] * 3600 + complete[1] * 60 + complete[2];\n    let diff_sec = complete_sec - start_sec;\n    return diff_sec;\n}\n"]},"metadata":{},"sourceType":"module"}