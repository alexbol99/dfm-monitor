{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/alexanderbol/WebstormProjects/dfm-monitor/components/MainComponent/MainComponent.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport styles from './MainComponent.module.css';\nimport RunningLogsList from \"../RunningLogsList/RunningLogsList\";\nimport VegaLiteChart from \"../VegaLiteChart/VegaLiteChart\";\nimport { getChartData, getListData } from \"../../models/logData\";\nimport { loadFiles } from \"../../models/loadFiles\";\n\nfunction MainComponent(props) {\n  var _useState = useState([]),\n      logDataArray = _useState[0],\n      setLogDataArray = _useState[1];\n\n  var _useState2 = useState(0),\n      index = _useState2[0],\n      setIndex = _useState2[1];\n\n  var logsListData = [];\n  var chartData = null;\n  var runData = null; // Effect to load all data from AWS s3\n\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var localDataArray;\n      return _regeneratorRuntime.async(function fetchData$(_context) {\n        while (1) {\n          switch (_context.prev = _context.next) {\n            case 0:\n              _context.next = 2;\n              return _regeneratorRuntime.awrap(loadFiles());\n\n            case 2:\n              localDataArray = _context.sent;\n\n              // If all data loaded, render list and select first row\n              if (localDataArray.length > 0) {\n                setLogDataArray(localDataArray); // trigger rendering\n              }\n\n            case 4:\n            case \"end\":\n              return _context.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    if (logDataArray.length === 0) {\n      fetchData();\n    }\n  }); // Callback to set new chart data and update selected index\n\n  var logItemClicked = function logItemClicked(index) {\n    setIndex(index); // trigger rendering\n  };\n\n  if (props.dataArray.length > 0) {\n    setLogDataArray(props.dataArray);\n  } // Setup data before rendering\n\n\n  if (logDataArray.length > 0) {\n    logsListData = logDataArray.map(function (data) {\n      return getListData(data);\n    });\n    var localData = logDataArray[index];\n    chartData = localData.runningTime ? getChartData(localData) : null;\n    runData = getListData(localData);\n  }\n\n  return __jsx(\"main\", {\n    className: styles.MainComponent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 50,\n      columnNumber: 9\n    }\n  }, __jsx(RunningLogsList, {\n    logsListData: logsListData,\n    selectedIndex: index,\n    logItemClicked: logItemClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 51,\n      columnNumber: 13\n    }\n  }), __jsx(VegaLiteChart, {\n    data: chartData,\n    runData: runData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 55,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default MainComponent;","map":{"version":3,"sources":["/Users/alexanderbol/WebstormProjects/dfm-monitor/components/MainComponent/MainComponent.js"],"names":["React","useEffect","useState","styles","RunningLogsList","VegaLiteChart","getChartData","getListData","loadFiles","MainComponent","props","logDataArray","setLogDataArray","index","setIndex","logsListData","chartData","runData","fetchData","localDataArray","length","logItemClicked","dataArray","map","data","localData","runningTime"],"mappings":";;;AAAA,OAAOA,KAAP,IAAeC,SAAf,EAA0BC,QAA1B,QAAyC,OAAzC;AACA,OAAOC,MAAP,MAAmB,4BAAnB;AACA,OAAOC,eAAP,MAA4B,oCAA5B;AACA,OAAOC,aAAP,MAA0B,gCAA1B;AACA,SAAQC,YAAR,EAAsBC,WAAtB,QAAwC,sBAAxC;AACA,SAAQC,SAAR,QAAwB,wBAAxB;;AAEA,SAASC,aAAT,CAAuBC,KAAvB,EAA8B;AAAA,kBACcR,QAAQ,CAAC,EAAD,CADtB;AAAA,MACnBS,YADmB;AAAA,MACLC,eADK;;AAAA,mBAEAV,QAAQ,CAAC,CAAD,CAFR;AAAA,MAEnBW,KAFmB;AAAA,MAEZC,QAFY;;AAI1B,MAAIC,YAAY,GAAG,EAAnB;AACA,MAAIC,SAAS,GAAG,IAAhB;AACA,MAAIC,OAAO,GAAG,IAAd,CAN0B,CAQ1B;;AACAhB,EAAAA,SAAS,CAAE,YAAM;AACb,QAAMiB,SAAS,GAAG,SAAZA,SAAY;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,+CACeV,SAAS,EADxB;;AAAA;AACRW,cAAAA,cADQ;;AAEd;AACA,kBAAIA,cAAc,CAACC,MAAf,GAAwB,CAA5B,EAA+B;AAC3BR,gBAAAA,eAAe,CAACO,cAAD,CAAf,CAD2B,CACkB;AAChD;;AALa;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KAAlB;;AAQA,QAAIR,YAAY,CAACS,MAAb,KAAwB,CAA5B,EAA+B;AAC3BF,MAAAA,SAAS;AACZ;AACJ,GAZQ,CAAT,CAT0B,CAuB1B;;AACA,MAAMG,cAAc,GAAG,SAAjBA,cAAiB,CAACR,KAAD,EAAW;AAC9BC,IAAAA,QAAQ,CAACD,KAAD,CAAR,CAD8B,CACuB;AACxD,GAFD;;AAIA,MAAIH,KAAK,CAACY,SAAN,CAAgBF,MAAhB,GAAyB,CAA7B,EAAgC;AAC5BR,IAAAA,eAAe,CAACF,KAAK,CAACY,SAAP,CAAf;AACH,GA9ByB,CAgC1B;;;AACA,MAAIX,YAAY,CAACS,MAAb,GAAsB,CAA1B,EAA6B;AACzBL,IAAAA,YAAY,GAAGJ,YAAY,CAACY,GAAb,CAAiB,UAAAC,IAAI;AAAA,aAAIjB,WAAW,CAACiB,IAAD,CAAf;AAAA,KAArB,CAAf;AAEA,QAAIC,SAAS,GAAGd,YAAY,CAACE,KAAD,CAA5B;AACAG,IAAAA,SAAS,GAAGS,SAAS,CAACC,WAAV,GAAwBpB,YAAY,CAACmB,SAAD,CAApC,GAAkD,IAA9D;AACAR,IAAAA,OAAO,GAAGV,WAAW,CAACkB,SAAD,CAArB;AACH;;AAED,SACI;AAAM,IAAA,SAAS,EAAEtB,MAAM,CAACM,aAAxB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,KACI,MAAC,eAAD;AACI,IAAA,YAAY,EAAEM,YADlB;AAEI,IAAA,aAAa,EAAEF,KAFnB;AAGI,IAAA,cAAc,EAAEQ,cAHpB;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IADJ,EAKI,MAAC,aAAD;AAAe,IAAA,IAAI,EAAEL,SAArB;AAAgC,IAAA,OAAO,EAAEC,OAAzC;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA,IALJ,CADJ;AASH;;AAED,eAAeR,aAAf","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport styles from './MainComponent.module.css';\nimport RunningLogsList from \"../RunningLogsList/RunningLogsList\";\nimport VegaLiteChart from \"../VegaLiteChart/VegaLiteChart\";\nimport {getChartData, getListData} from \"../../models/logData\";\nimport {loadFiles} from \"../../models/loadFiles\";\n\nfunction MainComponent(props) {\n    const [logDataArray, setLogDataArray] = useState([]);\n    const [index, setIndex] = useState(0);\n\n    let logsListData = [];\n    let chartData = null;\n    let runData = null;\n\n    // Effect to load all data from AWS s3\n    useEffect( () => {\n        const fetchData = async () => {\n            const localDataArray = await loadFiles();\n            // If all data loaded, render list and select first row\n            if (localDataArray.length > 0) {\n                setLogDataArray(localDataArray);             // trigger rendering\n            }\n        };\n\n        if (logDataArray.length === 0) {\n            fetchData();\n        }\n    });\n\n    // Callback to set new chart data and update selected index\n    const logItemClicked = (index) => {\n        setIndex(index);                                     // trigger rendering\n    }\n\n    if (props.dataArray.length > 0) {\n        setLogDataArray(props.dataArray);\n    }\n\n    // Setup data before rendering\n    if (logDataArray.length > 0) {\n        logsListData = logDataArray.map(data => getListData(data))\n\n        let localData = logDataArray[index];\n        chartData = localData.runningTime ? getChartData(localData) : null;\n        runData = getListData(localData);\n    }\n\n    return (\n        <main className={styles.MainComponent}>\n            <RunningLogsList\n                logsListData={logsListData}\n                selectedIndex={index}\n                logItemClicked={logItemClicked}/>\n            <VegaLiteChart data={chartData} runData={runData} />\n        </main>\n    );\n}\n\nexport default MainComponent;\n"]},"metadata":{},"sourceType":"module"}