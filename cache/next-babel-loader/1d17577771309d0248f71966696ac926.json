{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nvar _jsxFileName = \"/Users/alexanderbol/WebstormProjects/dfm-monitor/components/MainComponent/MainComponent.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport styles from './MainComponent.module.css';\nimport RunningLogsList from \"../RunningLogsList/RunningLogsList\";\nimport VegaLiteChart from \"../VegaLiteChart/VegaLiteChart\";\nimport { getChartData, getListData } from \"../../models/logData\";\nimport { parse } from \"../../models/logParser\";\n\nfunction MainComponent(props) {\n  var _useState = useState([]),\n      logDataArray = _useState[0],\n      setLogDataArray = _useState[1];\n\n  var _useState2 = useState(0),\n      index = _useState2[0],\n      setIndex = _useState2[1];\n\n  var logsListData = [];\n  var chartData = null;\n  var runData = null;\n\n  function loadFiles() {\n    var logs_api_uri, response, resp_json_str, keys_list, promises, respArray, json_promises, textArray, dataArray;\n    return _regeneratorRuntime.async(function loadFiles$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            logs_api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\n            _context.next = 3;\n            return _regeneratorRuntime.awrap(fetch(logs_api_uri));\n\n          case 3:\n            response = _context.sent;\n            _context.next = 6;\n            return _regeneratorRuntime.awrap(response.json());\n\n          case 6:\n            resp_json_str = _context.sent;\n            keys_list = JSON.parse(resp_json_str.body).keys;\n            promises = keys_list.map(function (key) {\n              return fetch(\"\".concat(logs_api_uri, \"/\").concat(key));\n            });\n            _context.next = 11;\n            return _regeneratorRuntime.awrap(Promise.all(promises));\n\n          case 11:\n            respArray = _context.sent;\n            json_promises = respArray.map(function (resp) {\n              return resp.json();\n            });\n            _context.next = 15;\n            return _regeneratorRuntime.awrap(Promise.all(json_promises));\n\n          case 15:\n            textArray = _context.sent;\n            dataArray = textArray.map(function (e) {\n              return parse(e.text);\n            });\n            dataArray.forEach(function (data, i) {\n              return data.key = keys_list[i];\n            });\n            dataArray.sort(function (a, b) {\n              return new Date(b.runningDate) - new Date(a.runningDate);\n            });\n            return _context.abrupt(\"return\", dataArray);\n\n          case 20:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, null, null, null, Promise);\n  } // Effect to load all data from AWS s3\n\n\n  useEffect(function () {\n    var fetchData = function fetchData() {\n      var localDataArray;\n      return _regeneratorRuntime.async(function fetchData$(_context2) {\n        while (1) {\n          switch (_context2.prev = _context2.next) {\n            case 0:\n              _context2.next = 2;\n              return _regeneratorRuntime.awrap(loadFiles());\n\n            case 2:\n              localDataArray = _context2.sent;\n\n              // If all data loaded, render list and select first row\n              if (localDataArray.length > 0) {\n                setLogDataArray(localDataArray); // trigger rendering\n              }\n\n            case 4:\n            case \"end\":\n              return _context2.stop();\n          }\n        }\n      }, null, null, null, Promise);\n    };\n\n    if (logDataArray.length === 0) {\n      fetchData();\n    }\n  }); // Callback to set new chart data and update selected index\n\n  var logItemClicked = function logItemClicked(index) {\n    setIndex(index); // trigger rendering\n  }; // Setup data before rendering\n\n\n  if (logDataArray.length > 0) {\n    logsListData = logDataArray.map(function (data) {\n      return getListData(data);\n    });\n    var localData = logDataArray[index];\n    chartData = localData.runningTime ? getChartData(localData) : null;\n    runData = getListData(localData);\n  }\n\n  return __jsx(\"main\", {\n    className: styles.MainComponent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, __jsx(RunningLogsList, {\n    logsListData: logsListData,\n    selectedIndex: index,\n    logItemClicked: logItemClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), __jsx(VegaLiteChart, {\n    data: chartData,\n    runData: runData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default MainComponent;","map":{"version":3,"sources":["/Users/alexanderbol/WebstormProjects/dfm-monitor/components/MainComponent/MainComponent.js"],"names":["React","useEffect","useState","styles","RunningLogsList","VegaLiteChart","getChartData","getListData","parse","MainComponent","props","logDataArray","setLogDataArray","index","setIndex","logsListData","chartData","runData","loadFiles","logs_api_uri","fetch","response","json","resp_json_str","keys_list","JSON","body","keys","promises","map","key","Promise","all","respArray","json_promises","resp","textArray","dataArray","e","text","forEach","data","i","sort","a","b","Date","runningDate","fetchData","localDataArray","length","logItemClicked","localData","runningTime"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport styles from './MainComponent.module.css';\nimport RunningLogsList from \"../RunningLogsList/RunningLogsList\";\nimport VegaLiteChart from \"../VegaLiteChart/VegaLiteChart\";\nimport {getChartData, getListData} from \"../../models/logData\";\nimport {parse} from \"../../models/logParser\";\n\nfunction MainComponent(props) {\n    const [logDataArray, setLogDataArray] = useState([]);\n    const [index, setIndex] = useState(0);\n\n    let logsListData = [];\n    let chartData = null;\n    let runData = null;\n\n    async function loadFiles() {\n        let logs_api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\n\n        let response = await fetch(logs_api_uri);\n        let resp_json_str = await response.json()\n        let keys_list = JSON.parse(resp_json_str.body).keys;\n\n        let promises = keys_list.map (key => fetch(`${logs_api_uri}/${key}`))\n        let respArray = await Promise.all(promises)\n        let json_promises = respArray.map(resp => resp.json())\n        let textArray = await Promise.all(json_promises);\n        let dataArray = textArray.map( e => parse(e.text));\n        dataArray.forEach( (data,i) => data.key = keys_list[i] )\n        dataArray.sort(function(a,b){\n            return new Date(b.runningDate) - new Date(a.runningDate);\n        });\n        return dataArray;\n    }\n\n    // Effect to load all data from AWS s3\n    useEffect( () => {\n        const fetchData = async () => {\n            const localDataArray = await loadFiles();\n            // If all data loaded, render list and select first row\n            if (localDataArray.length > 0) {\n                setLogDataArray(localDataArray);             // trigger rendering\n            }\n        };\n\n        if (logDataArray.length === 0) {\n            fetchData();\n        }\n    });\n\n    // Callback to set new chart data and update selected index\n    const logItemClicked = (index) => {\n        setIndex(index);                                     // trigger rendering\n    }\n\n    // Setup data before rendering\n    if (logDataArray.length > 0) {\n        logsListData = logDataArray.map(data => getListData(data))\n\n        let localData = logDataArray[index];\n        chartData = localData.runningTime ? getChartData(localData) : null;\n        runData = getListData(localData);\n    }\n\n    return (\n        <main className={styles.MainComponent}>\n            <RunningLogsList\n                logsListData={logsListData}\n                selectedIndex={index}\n                logItemClicked={logItemClicked}/>\n            <VegaLiteChart data={chartData} runData={runData} />\n        </main>\n    );\n}\n\nexport default MainComponent;\n"]},"metadata":{},"sourceType":"module"}