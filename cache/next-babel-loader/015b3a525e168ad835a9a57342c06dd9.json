{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\nimport { parse } from \"./logParser\";\nexport function loadFiles() {\n  var logs_api_uri, response, resp_json_str, keys_list, promises, respArray, json_promises, textArray, dataArray;\n  return _regeneratorRuntime.async(function loadFiles$(_context) {\n    while (1) {\n      switch (_context.prev = _context.next) {\n        case 0:\n          logs_api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\n          _context.next = 3;\n          return _regeneratorRuntime.awrap(fetch(logs_api_uri));\n\n        case 3:\n          response = _context.sent;\n          _context.next = 6;\n          return _regeneratorRuntime.awrap(response.json());\n\n        case 6:\n          resp_json_str = _context.sent;\n          keys_list = JSON.parse(resp_json_str.body).keys;\n          promises = keys_list.map(function (key) {\n            return fetch(\"\".concat(logs_api_uri, \"/\").concat(key));\n          });\n          _context.next = 11;\n          return _regeneratorRuntime.awrap(Promise.all(promises));\n\n        case 11:\n          respArray = _context.sent;\n          json_promises = respArray.map(function (resp) {\n            return resp.json();\n          });\n          _context.next = 15;\n          return _regeneratorRuntime.awrap(Promise.all(json_promises));\n\n        case 15:\n          textArray = _context.sent;\n          dataArray = textArray.map(function (e) {\n            return parse(e.text);\n          });\n          dataArray.forEach(function (data, i) {\n            return data.key = keys_list[i];\n          });\n          dataArray.sort(function (a, b) {\n            return new Date(b.runningDate) - new Date(a.runningDate);\n          });\n          return _context.abrupt(\"return\", dataArray);\n\n        case 20:\n        case \"end\":\n          return _context.stop();\n      }\n    }\n  }, null, null, null, Promise);\n}","map":{"version":3,"sources":["/Users/alexanderbol/WebstormProjects/dfm-monitor/models/loadFiles.js"],"names":["parse","loadFiles","logs_api_uri","fetch","response","json","resp_json_str","keys_list","JSON","body","keys","promises","map","key","Promise","all","respArray","json_promises","resp","textArray","dataArray","e","text","forEach","data","i","sort","a","b","Date","runningDate"],"mappings":";AAAA,SAAQA,KAAR,QAAoB,aAApB;AAEA,OAAO,SAAeC,SAAf;AAAA;AAAA;AAAA;AAAA;AAAA;AACCC,UAAAA,YADD,GACgB,qEADhB;AAAA;AAAA,2CAGkBC,KAAK,CAACD,YAAD,CAHvB;;AAAA;AAGCE,UAAAA,QAHD;AAAA;AAAA,2CAIuBA,QAAQ,CAACC,IAAT,EAJvB;;AAAA;AAICC,UAAAA,aAJD;AAKCC,UAAAA,SALD,GAKaC,IAAI,CAACR,KAAL,CAAWM,aAAa,CAACG,IAAzB,EAA+BC,IAL5C;AAOCC,UAAAA,QAPD,GAOYJ,SAAS,CAACK,GAAV,CAAe,UAAAC,GAAG;AAAA,mBAAIV,KAAK,WAAID,YAAJ,cAAoBW,GAApB,EAAT;AAAA,WAAlB,CAPZ;AAAA;AAAA,2CAQmBC,OAAO,CAACC,GAAR,CAAYJ,QAAZ,CARnB;;AAAA;AAQCK,UAAAA,SARD;AASCC,UAAAA,aATD,GASiBD,SAAS,CAACJ,GAAV,CAAc,UAAAM,IAAI;AAAA,mBAAIA,IAAI,CAACb,IAAL,EAAJ;AAAA,WAAlB,CATjB;AAAA;AAAA,2CAUmBS,OAAO,CAACC,GAAR,CAAYE,aAAZ,CAVnB;;AAAA;AAUCE,UAAAA,SAVD;AAWCC,UAAAA,SAXD,GAWaD,SAAS,CAACP,GAAV,CAAe,UAAAS,CAAC;AAAA,mBAAIrB,KAAK,CAACqB,CAAC,CAACC,IAAH,CAAT;AAAA,WAAhB,CAXb;AAYHF,UAAAA,SAAS,CAACG,OAAV,CAAmB,UAACC,IAAD,EAAMC,CAAN;AAAA,mBAAYD,IAAI,CAACX,GAAL,GAAWN,SAAS,CAACkB,CAAD,CAAhC;AAAA,WAAnB;AACAL,UAAAA,SAAS,CAACM,IAAV,CAAe,UAASC,CAAT,EAAWC,CAAX,EAAa;AACxB,mBAAO,IAAIC,IAAJ,CAASD,CAAC,CAACE,WAAX,IAA0B,IAAID,IAAJ,CAASF,CAAC,CAACG,WAAX,CAAjC;AACH,WAFD;AAbG,2CAgBIV,SAhBJ;;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA","sourcesContent":["import {parse} from \"./logParser\";\n\nexport async function loadFiles() {\n    let logs_api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\n\n    let response = await fetch(logs_api_uri);\n    let resp_json_str = await response.json()\n    let keys_list = JSON.parse(resp_json_str.body).keys;\n\n    let promises = keys_list.map (key => fetch(`${logs_api_uri}/${key}`))\n    let respArray = await Promise.all(promises)\n    let json_promises = respArray.map(resp => resp.json())\n    let textArray = await Promise.all(json_promises);\n    let dataArray = textArray.map( e => parse(e.text));\n    dataArray.forEach( (data,i) => data.key = keys_list[i] )\n    dataArray.sort(function(a,b){\n        return new Date(b.runningDate) - new Date(a.runningDate);\n    });\n    return dataArray;\n}\n"]},"metadata":{},"sourceType":"module"}