{"ast":null,"code":"var _jsxFileName = \"/Users/alexanderbol/WebstormProjects/dfm-monitor/components/MainComponent/MainComponent.js\";\nvar __jsx = React.createElement;\nimport React, { useEffect, useState } from 'react';\nimport styles from './MainComponent.module.css';\nimport RunningLogsList from \"../RunningLogsList/RunningLogsList\";\nimport VegaLiteChart from \"../VegaLiteChart/VegaLiteChart\";\nimport { getChartData, getListData } from \"../../models/logData\";\nimport { parse } from \"../../models/logParser\";\n\nfunction MainComponent(props) {\n  const {\n    0: logDataArray,\n    1: setLogDataArray\n  } = useState([]);\n  const {\n    0: index,\n    1: setIndex\n  } = useState(0);\n  let logsListData = [];\n  let chartData = null;\n  let runData = null;\n\n  async function loadFiles() {\n    let logs_api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\n    let response = await fetch(logs_api_uri);\n    let resp_json_str = await response.json();\n    let keys_list = JSON.parse(resp_json_str.body).keys;\n    let promises = keys_list.map(key => fetch(`${logs_api_uri}/${key}`));\n    let respArray = await Promise.all(promises);\n    let json_promises = respArray.map(resp => resp.json());\n    let textArray = await Promise.all(json_promises);\n    let dataArray = textArray.map(e => parse(e.text));\n    dataArray.forEach((data, i) => data.key = keys_list[i]);\n    dataArray.sort(function (a, b) {\n      return new Date(b.runningDate) - new Date(a.runningDate);\n    });\n    return dataArray;\n  } // Effect to load all data from AWS s3\n\n\n  useEffect(() => {\n    const fetchData = async () => {\n      const localDataArray = await loadFiles(); // If all data loaded, render list and select first row\n\n      if (localDataArray.length > 0) {\n        setLogDataArray(localDataArray); // trigger rendering\n      }\n    };\n\n    if (logDataArray.length === 0) {\n      fetchData();\n    }\n  }); // Callback to set new chart data and update selected index\n\n  const logItemClicked = index => {\n    setIndex(index); // trigger rendering\n  }; // Setup data before rendering\n\n\n  if (logDataArray.length > 0) {\n    logsListData = logDataArray.map(data => getListData(data));\n    let localData = logDataArray[index];\n    chartData = localData.runningTime ? getChartData(localData) : null;\n    runData = getListData(localData);\n  }\n\n  return __jsx(\"main\", {\n    className: styles.MainComponent,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 65,\n      columnNumber: 9\n    }\n  }, __jsx(RunningLogsList, {\n    logsListData: logsListData,\n    selectedIndex: index,\n    logItemClicked: logItemClicked,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 66,\n      columnNumber: 13\n    }\n  }), __jsx(VegaLiteChart, {\n    data: chartData,\n    runData: runData,\n    __self: this,\n    __source: {\n      fileName: _jsxFileName,\n      lineNumber: 70,\n      columnNumber: 13\n    }\n  }));\n}\n\nexport default MainComponent;","map":{"version":3,"sources":["/Users/alexanderbol/WebstormProjects/dfm-monitor/components/MainComponent/MainComponent.js"],"names":["React","useEffect","useState","styles","RunningLogsList","VegaLiteChart","getChartData","getListData","parse","MainComponent","props","logDataArray","setLogDataArray","index","setIndex","logsListData","chartData","runData","loadFiles","logs_api_uri","response","fetch","resp_json_str","json","keys_list","JSON","body","keys","promises","map","key","respArray","Promise","all","json_promises","resp","textArray","dataArray","e","text","forEach","data","i","sort","a","b","Date","runningDate","fetchData","localDataArray","length","logItemClicked","localData","runningTime"],"mappings":"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","sourcesContent":["import React, {useEffect, useState} from 'react';\nimport styles from './MainComponent.module.css';\nimport RunningLogsList from \"../RunningLogsList/RunningLogsList\";\nimport VegaLiteChart from \"../VegaLiteChart/VegaLiteChart\";\nimport {getChartData, getListData} from \"../../models/logData\";\nimport {parse} from \"../../models/logParser\";\n\nfunction MainComponent(props) {\n    const [logDataArray, setLogDataArray] = useState([]);\n    const [index, setIndex] = useState(0);\n\n    let logsListData = [];\n    let chartData = null;\n    let runData = null;\n\n    async function loadFiles() {\n        let logs_api_uri = \"https://bah2tkltg6.execute-api.eu-central-1.amazonaws.com/test/list\";\n\n        let response = await fetch(logs_api_uri);\n        let resp_json_str = await response.json()\n        let keys_list = JSON.parse(resp_json_str.body).keys;\n\n        let promises = keys_list.map (key => fetch(`${logs_api_uri}/${key}`))\n        let respArray = await Promise.all(promises)\n        let json_promises = respArray.map(resp => resp.json())\n        let textArray = await Promise.all(json_promises);\n        let dataArray = textArray.map( e => parse(e.text));\n        dataArray.forEach( (data,i) => data.key = keys_list[i] )\n        dataArray.sort(function(a,b){\n            return new Date(b.runningDate) - new Date(a.runningDate);\n        });\n        return dataArray;\n    }\n\n    // Effect to load all data from AWS s3\n    useEffect( () => {\n        const fetchData = async () => {\n            const localDataArray = await loadFiles();\n            // If all data loaded, render list and select first row\n            if (localDataArray.length > 0) {\n                setLogDataArray(localDataArray);             // trigger rendering\n            }\n        };\n\n        if (logDataArray.length === 0) {\n            fetchData();\n        }\n    });\n\n    // Callback to set new chart data and update selected index\n    const logItemClicked = (index) => {\n        setIndex(index);                                     // trigger rendering\n    }\n\n    // Setup data before rendering\n    if (logDataArray.length > 0) {\n        logsListData = logDataArray.map(data => getListData(data))\n\n        let localData = logDataArray[index];\n        chartData = localData.runningTime ? getChartData(localData) : null;\n        runData = getListData(localData);\n    }\n\n    return (\n        <main className={styles.MainComponent}>\n            <RunningLogsList\n                logsListData={logsListData}\n                selectedIndex={index}\n                logItemClicked={logItemClicked}/>\n            <VegaLiteChart data={chartData} runData={runData} />\n        </main>\n    );\n}\n\nexport default MainComponent;\n"]},"metadata":{},"sourceType":"module"}